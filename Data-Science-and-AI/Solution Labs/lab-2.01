{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "N5QU3Zjtsp3r"
      },
      "source": [
        "# Lab 2.01 - Australian Athletes (ais)\n",
        "\n",
        "Import all necessary Python libraries and load the AIS dataset from lab exercise 1.01. Also include the code for setting the index and conversion to categorical variables!"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "id": "sO9dQlwIsp3x",
        "outputId": "dd8dcd1a-dbd1-4452-ebfe-c69efef1e423",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-0688d42e-e882-4097-a63a-e31e8e779085\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>rcc</th>\n",
              "      <th>wcc</th>\n",
              "      <th>hc</th>\n",
              "      <th>hg</th>\n",
              "      <th>ferr</th>\n",
              "      <th>bmi</th>\n",
              "      <th>ssf</th>\n",
              "      <th>pcBfat</th>\n",
              "      <th>lbm</th>\n",
              "      <th>ht</th>\n",
              "      <th>wt</th>\n",
              "      <th>sex</th>\n",
              "      <th>sport</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>id</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>3.96</td>\n",
              "      <td>7.5</td>\n",
              "      <td>37.5</td>\n",
              "      <td>12.3</td>\n",
              "      <td>60</td>\n",
              "      <td>20.56</td>\n",
              "      <td>109.1</td>\n",
              "      <td>19.75</td>\n",
              "      <td>63.32</td>\n",
              "      <td>195.9</td>\n",
              "      <td>78.9</td>\n",
              "      <td>f</td>\n",
              "      <td>B_Ball</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4.41</td>\n",
              "      <td>8.3</td>\n",
              "      <td>38.2</td>\n",
              "      <td>12.7</td>\n",
              "      <td>68</td>\n",
              "      <td>20.67</td>\n",
              "      <td>102.8</td>\n",
              "      <td>21.30</td>\n",
              "      <td>58.55</td>\n",
              "      <td>189.7</td>\n",
              "      <td>74.4</td>\n",
              "      <td>f</td>\n",
              "      <td>B_Ball</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4.14</td>\n",
              "      <td>5.0</td>\n",
              "      <td>36.4</td>\n",
              "      <td>11.6</td>\n",
              "      <td>21</td>\n",
              "      <td>21.86</td>\n",
              "      <td>104.6</td>\n",
              "      <td>19.88</td>\n",
              "      <td>55.36</td>\n",
              "      <td>177.8</td>\n",
              "      <td>69.1</td>\n",
              "      <td>f</td>\n",
              "      <td>B_Ball</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4.11</td>\n",
              "      <td>5.3</td>\n",
              "      <td>37.3</td>\n",
              "      <td>12.6</td>\n",
              "      <td>69</td>\n",
              "      <td>21.88</td>\n",
              "      <td>126.4</td>\n",
              "      <td>23.66</td>\n",
              "      <td>57.18</td>\n",
              "      <td>185.0</td>\n",
              "      <td>74.9</td>\n",
              "      <td>f</td>\n",
              "      <td>B_Ball</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>4.45</td>\n",
              "      <td>6.8</td>\n",
              "      <td>41.5</td>\n",
              "      <td>14.0</td>\n",
              "      <td>29</td>\n",
              "      <td>18.96</td>\n",
              "      <td>80.3</td>\n",
              "      <td>17.64</td>\n",
              "      <td>53.20</td>\n",
              "      <td>184.6</td>\n",
              "      <td>64.6</td>\n",
              "      <td>f</td>\n",
              "      <td>B_Ball</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0688d42e-e882-4097-a63a-e31e8e779085')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-0688d42e-e882-4097-a63a-e31e8e779085 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-0688d42e-e882-4097-a63a-e31e8e779085');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "     rcc  wcc    hc    hg  ferr    bmi    ssf  pcBfat    lbm     ht    wt sex  \\\n",
              "id                                                                              \n",
              "1   3.96  7.5  37.5  12.3    60  20.56  109.1   19.75  63.32  195.9  78.9   f   \n",
              "2   4.41  8.3  38.2  12.7    68  20.67  102.8   21.30  58.55  189.7  74.4   f   \n",
              "3   4.14  5.0  36.4  11.6    21  21.86  104.6   19.88  55.36  177.8  69.1   f   \n",
              "4   4.11  5.3  37.3  12.6    69  21.88  126.4   23.66  57.18  185.0  74.9   f   \n",
              "5   4.45  6.8  41.5  14.0    29  18.96   80.3   17.64  53.20  184.6  64.6   f   \n",
              "\n",
              "     sport  \n",
              "id          \n",
              "1   B_Ball  \n",
              "2   B_Ball  \n",
              "3   B_Ball  \n",
              "4   B_Ball  \n",
              "5   B_Ball  "
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ],
      "source": [
        "# Importing the necessary packages\n",
        "import numpy as np                                  # \"Scientific computing\"\n",
        "import scipy.stats as stats                         # Statistical tests\n",
        "\n",
        "import pandas as pd                                 # Data Frame\n",
        "from pandas.api.types import CategoricalDtype\n",
        "\n",
        "import matplotlib.pyplot as plt                     # Basic visualisation\n",
        "from statsmodels.graphics.mosaicplot import mosaic  # Mosaic diagram\n",
        "import seaborn as sns                               # Advanced data visualisation\n",
        "import altair as alt                                # Alternative visualisation system\n",
        "\n",
        "\n",
        "ais = pd.read_csv('https://raw.githubusercontent.com/arnauddormaels/Data-Science-and-AI/main/data/ais.csv')\n",
        "ais = ais.set_index(['id'])\n",
        "ais.sex=ais.sex.astype('category')\n",
        "ais.sport=ais.sport.astype('category')\n",
        "ais.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "w_Xx5tWZsp3y"
      },
      "source": [
        "Use an appropriate chart type to visualise the following variables. Are several chart types suitable? Make one of each! Note how some graphs nevertheless give a better insight into the data than other types of graphs.\n",
        "\n",
        "- `sex`\n",
        "- `sport`\n",
        "- `ht` (show this also divided by `sex` and by `sport`.)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "id": "9pplCC4ysp3z",
        "outputId": "8fc0c179-3b78-41c4-f08c-f94e5704a7e3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 386
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x7fa42bce8e10>"
            ]
          },
          "metadata": {},
          "execution_count": 18
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "\n",
        "sns.catplot(data=ais,kind=\"count\",y=\"sex\")\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#sns.catplot(data=ais,kind=\"count\",y=\"sport\")\n",
        "sns.countplot(data=ais, y=\"sport\", order = ais.sport.value_counts().index)"
      ],
      "metadata": {
        "id": "hrc4Urlnv24Z",
        "outputId": "07b8da49-293b-44b9-8aa4-24dd41e73c80",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        }
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fa4263bf590>"
            ]
          },
          "metadata": {},
          "execution_count": 30
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.boxplot(data=ais,x='ht',y='sport')"
      ],
      "metadata": {
        "id": "fH2Qv1kI-oN9",
        "outputId": "cc583755-b09f-46cb-e20f-382659cddabf",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        }
      },
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fa425c80b10>"
            ]
          },
          "metadata": {},
          "execution_count": 64
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.boxplot(data=ais[ais.sex=='f'],x='ht')\n",
        "\n"
      ],
      "metadata": {
        "id": "Co9JUkp-6uWt",
        "outputId": "788a220a-28b3-4ddf-daff-58e4bfab3265",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        }
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fa4263bf1d0>"
            ]
          },
          "metadata": {},
          "execution_count": 45
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.boxplot(data=ais[ais.sex=='m'],x='ht',color='orange')"
      ],
      "metadata": {
        "id": "D_-j66xB7nqN",
        "outputId": "3ac10e31-d463-4745-f2f1-2da00652cde5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        }
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fa425d84b90>"
            ]
          },
          "metadata": {},
          "execution_count": 46
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "c-iC-nafsp3z"
      },
      "source": [
        "Select the following subsets from the dataset and calculate for each the appropriate measures of central tendency (and, when possible, dispersion) of the variables `ht` and `sex`:\n",
        "\n",
        "1. the rowers\n",
        "2. the rowers, netball and tennis players together\n",
        "3. the female basketball players and rowers together"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 56,
      "metadata": {
        "id": "L2gfMu9qsp30",
        "outputId": "afbd2218-8fde-4c65-a11c-8b1a5dcdb4d3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count     37.000000\n",
              "mean     182.375676\n",
              "std        7.798376\n",
              "min      156.000000\n",
              "25%      179.300000\n",
              "50%      181.800000\n",
              "75%      186.300000\n",
              "max      198.000000\n",
              "Name: ht, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 56
        }
      ],
      "source": [
        "ais[(ais.sport=='Row')].ht.describe()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ais[(ais.sport=='Row')|(ais.sport=='Netball')|(ais.sport=='Tennis')].ht.describe()"
      ],
      "metadata": {
        "id": "B3KaTMuU88q1",
        "outputId": "f40a391d-4c8e-4dd3-f529-dbc452ba4b60",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count     71.000000\n",
              "mean     179.066197\n",
              "std        7.936371\n",
              "min      156.000000\n",
              "25%      174.250000\n",
              "50%      179.500000\n",
              "75%      183.400000\n",
              "max      198.000000\n",
              "Name: ht, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 58
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ais[((ais.sport=='B_Ball')|(ais.sport=='Row')) & (ais.sex=='f')].ht.describe()"
      ],
      "metadata": {
        "id": "MaYnbovF9-Qd",
        "outputId": "6af47cba-0850-4bae-f840-7f183af11636",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count     35.000000\n",
              "mean     180.125714\n",
              "std        7.144078\n",
              "min      156.000000\n",
              "25%      177.400000\n",
              "50%      179.700000\n",
              "75%      184.650000\n",
              "max      195.900000\n",
              "Name: ht, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 61
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1e5sHVF-sp31"
      },
      "source": [
        "## Check your answers\n",
        "\n",
        "As a check, here are the results of the last question. First the frequencies and mode of the variable `sex`:\n",
        "\n",
        "|           | Selection 1 | Selection 2 | Selection 3 |\n",
        "| :-------- | :---------- | :---------- | :---------- |\n",
        "| **f**     | 22          | 52          | 35          |\n",
        "| **m**     | 15          | 19          | 0           |\n",
        "| **mode**  | f           | f           | f           |\n",
        "\n",
        "Then the relevant measures for central tendency and dispersion for `ht` (max. 3 decimal places):\n",
        "\n",
        "| Statistic  | Selection 1 | Selection 2 | Selection 3 |\n",
        "| :--------- | :---------- | :---------- | :---------- |\n",
        "| mean       | 182.376     | 179.066     | 180.126     |\n",
        "| stdev      | 7.798       | 7.936       | 7.144       |\n",
        "| min        | 156         | 156         | 156         |\n",
        "| Q1         | 179.3       | 174.25      | 177.4       |\n",
        "| median     | 181.8       | 179.5       | 179.7       |\n",
        "| Q3         | 186.3       | 183.4       | 184.65      |\n",
        "| max        | 198         | 198         | 195.9       |\n",
        "| IQR        | 7           | 9.15        | 7.250       |"
      ]
    }
  ],
  "metadata": {
    "language_info": {
      "name": "python"
    },
    "orig_nbformat": 4,
    "colab": {
      "name": "lab-2-01.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}